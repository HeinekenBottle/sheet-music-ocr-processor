#!/bin/bash

# Sheet Music Processing System v4.0
# Unified OCR-first processor with compression and organization
# Usage: ./process-sheet-music-v4 [USB_PATH] [OUTPUT_PATH] [OPTIONS]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROCESSOR_SCRIPT="$SCRIPT_DIR/unified_sheet_processor.py"

# Default paths
DEFAULT_USB_PATH="/Volumes"
DEFAULT_OUTPUT_PATH="$HOME/sheet-music-project/organized"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_usage() {
    echo "üéµ Sheet Music Processing System v4.0"
    echo ""
    echo "Usage: $0 [USB_PATH] [OUTPUT_PATH] [OPTIONS]"
    echo ""
    echo "Process sheet music scans using OCR.space for metadata extraction"
    echo ""
    echo "Arguments:"
    echo "  USB_PATH      Path to USB drive (default: auto-detect)"
    echo "  OUTPUT_PATH   Output directory (default: ~/sheet-music-project/organized)"
    echo ""
    echo "Options:"
    echo "  --batch-size N Process N files at a time (default: 10)"
    echo "  --help        Show this help message"
    echo ""
    echo "Features:"
    echo "  ‚úì OCR.space text extraction"
    echo "  ‚úì PDF compression for API compliance"
    echo "  ‚úì Fuzzy instrument matching"
    echo "  ‚úì Piece/Instrument/Part organization"
    echo "  ‚úì Original file preservation"
    echo "  ‚úì Automatic cleanup"
    echo ""
    echo "Examples:"
    echo "  $0                                    # Auto-detect USB, use default output"
    echo "  $0 /Volumes/MyUSB                    # Specific USB path"
    echo "  $0 /Volumes/MyUSB /path/to/output    # Custom USB and output paths"
    echo "  $0 --batch-size 5                   # Process 5 files at a time"
}

detect_usb_drives() {
    echo -e "${BLUE}Detecting USB drives...${NC}"
    
    # Look for common USB drive mount points
    USB_DRIVES=()
    
    for mount_point in /Volumes/*; do
        if [ -d "$mount_point" ] && [ "$(basename "$mount_point")" != "Macintosh HD" ]; then
            # Check if it contains PDF files
            if find "$mount_point" -name "*.pdf" -o -name "*.PDF" | head -1 | grep -q .; then
                USB_DRIVES+=("$mount_point")
                echo -e "  ${GREEN}‚úì${NC} Found: $(basename "$mount_point") at $mount_point"
            fi
        fi
    done
    
    if [ ${#USB_DRIVES[@]} -eq 0 ]; then
        echo -e "  ${RED}‚úó${NC} No USB drives with PDF files found"
        return 1
    elif [ ${#USB_DRIVES[@]} -eq 1 ]; then
        echo -e "${GREEN}Using USB drive: ${USB_DRIVES[0]}${NC}"
        echo "${USB_DRIVES[0]}"
        return 0
    else
        echo -e "${YELLOW}Multiple USB drives found:${NC}"
        for i in "${!USB_DRIVES[@]}"; do
            echo "  $((i+1)). $(basename "${USB_DRIVES[$i]}") at ${USB_DRIVES[$i]}"
        done
        echo -n "Select drive (1-${#USB_DRIVES[@]}): "
        read -r selection
        
        if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 1 ] && [ "$selection" -le ${#USB_DRIVES[@]} ]; then
            selected_drive="${USB_DRIVES[$((selection-1))]}"
            echo -e "${GREEN}Using: $selected_drive${NC}"
            echo "$selected_drive"
            return 0
        else
            echo -e "${RED}Invalid selection${NC}"
            return 1
        fi
    fi
}

check_dependencies() {
    echo -e "${BLUE}Checking dependencies...${NC}"
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        echo -e "  ${RED}‚úó${NC} Python 3 not found"
        return 1
    else
        echo -e "  ${GREEN}‚úì${NC} Python 3 found"
    fi
    
    # Check core packages
    python3 -c "import requests, pathlib" 2>/dev/null
    if [ $? -eq 0 ]; then
        echo -e "  ${GREEN}‚úì${NC} Core Python packages installed"
    else
        echo -e "  ${RED}‚úó${NC} Missing core Python packages"
        echo "Run: pip install requests"
        return 1
    fi
    
    # Check PDF processing
    python3 -c "from pypdf import PdfReader" 2>/dev/null
    if [ $? -eq 0 ]; then
        echo -e "  ${GREEN}‚úì${NC} PDF processing available (pypdf)"
    else
        echo -e "  ${YELLOW}!${NC} PDF compression disabled (pypdf not available)"
        echo "    Install with: pip install pypdf"
    fi
    
    return 0
}

# Parse arguments
USB_PATH=""
OUTPUT_PATH="$DEFAULT_OUTPUT_PATH"
EXTRA_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            print_usage
            exit 0
            ;;
        --batch-size)
            EXTRA_ARGS+=("$1" "$2")
            shift 2
            ;;
        --*)
            echo -e "${RED}Unknown option: $1${NC}"
            print_usage
            exit 1
            ;;
        *)
            if [ -z "$USB_PATH" ]; then
                USB_PATH="$1"
            elif [ -z "$OUTPUT_PATH" ] || [ "$OUTPUT_PATH" = "$DEFAULT_OUTPUT_PATH" ]; then
                OUTPUT_PATH="$1"
            else
                echo -e "${RED}Too many arguments${NC}"
                print_usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Check dependencies
if ! check_dependencies; then
    exit 1
fi

# Auto-detect USB if not provided
if [ -z "$USB_PATH" ]; then
    USB_PATH=$(detect_usb_drives)
    if [ $? -ne 0 ]; then
        echo -e "${RED}Please specify USB path manually${NC}"
        print_usage
        exit 1
    fi
fi

# Validate USB path
if [ ! -d "$USB_PATH" ]; then
    echo -e "${RED}Error: USB path does not exist: $USB_PATH${NC}"
    exit 1
fi

# Create output directory
mkdir -p "$OUTPUT_PATH"

echo ""
echo -e "${BLUE}üéµ Sheet Music Processing System v4.0${NC}"
echo "============================================================"
echo "  Input: $USB_PATH"
echo "  Output: $OUTPUT_PATH"
echo "  Options: ${EXTRA_ARGS[*]}"
echo ""

# Count PDF files
PDF_COUNT=$(find "$USB_PATH" -name "*.pdf" -o -name "*.PDF" | wc -l | tr -d ' ')
echo -e "${BLUE}Found $PDF_COUNT PDF files ready for processing${NC}"
echo ""

# Run the processor
echo -e "${BLUE}Starting OCR processing...${NC}"
python3 "$PROCESSOR_SCRIPT" "$USB_PATH" "$OUTPUT_PATH" "${EXTRA_ARGS[@]}"

exit_code=$?

echo ""
echo "============================================================"
if [ $exit_code -eq 0 ]; then
    echo -e "${GREEN}üéâ Processing completed successfully!${NC}"
    echo -e "${BLUE}Organized files available at: $OUTPUT_PATH${NC}"
else
    echo -e "${RED}‚ùå Processing failed with exit code $exit_code${NC}"
fi

exit $exit_code